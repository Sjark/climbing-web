/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/v2/permissions": {
    get: operations["getPermissions"];
    post: operations["postPermissions"];
  };
  "/v2/media": {
    get: operations["getMedia"];
    put: operations["putMedia"];
    delete: operations["deleteMedia"];
  };
  "/v2/activity": {
    get: operations["getActivity"];
  };
  "/v2/administrators": {
    get: operations["getAdministrators"];
  };
  "/v2/areas": {
    get: operations["getAreas"];
    post: operations["postAreas"];
  };
  "/v2/areas/pdf": {
    get: operations["getAreasPdf"];
  };
  "/v2/images": {
    get: operations["getImages"];
  };
  "/v2/meta": {
    get: operations["getMeta"];
  };
  "/v2/webcams": {
    get: operations["getCameras"];
  };
  "/v2/dangerous": {
    get: operations["getDangerous"];
  };
  "/v2/frontpage": {
    get: operations["getFrontpage"];
  };
  "/v2/grade/distribution": {
    get: operations["getGradeDistribution"];
  };
  "/v2/graph": {
    get: operations["getGraph"];
  };
  "/v2/problem": {
    get: operations["getProblem"];
  };
  "/v2/problem/pdf": {
    get: operations["getProblemPdf"];
  };
  "/v2/problems": {
    get: operations["getProblems"];
    post: operations["postProblems"];
  };
  "/v2/problems/xlsx": {
    get: operations["getProblemsXlsx"];
  };
  "/v2/profile": {
    get: operations["getProfile"];
  };
  "/v2/profile/media": {
    get: operations["getProfilemedia"];
  };
  "/v2/profile/statistics": {
    get: operations["getProfileStatistics"];
  };
  "/v2/profile/todo": {
    get: operations["getProfileTodo"];
  };
  "/v2/robots.txt": {
    get: operations["getRobotsTxt"];
  };
  "/v2/sectors": {
    get: operations["getSectors"];
    post: operations["postSectors"];
  };
  "/v2/sectors/pdf": {
    get: operations["getSectorsPdf"];
  };
  "/v2/sitemap.txt": {
    get: operations["getSitemapTxt"];
  };
  "/v2/ticks": {
    get: operations["getTicks"];
    post: operations["postTicks"];
  };
  "/v2/todo": {
    get: operations["getTodo"];
    post: operations["postTodo"];
  };
  "/v2/top": {
    get: operations["getTop"];
  };
  "/v2/trash": {
    get: operations["getTrash"];
    put: operations["putTrash"];
  };
  "/v2/users/search": {
    get: operations["getUsersSearch"];
  };
  "/v2/users/ticks": {
    get: operations["getUsersTicks"];
  };
  "/v2/without-js": {
    get: operations["getWithoutJs"];
  };
  "/v2/without-js/area/{id}": {
    get: operations["getWithoutJsArea"];
  };
  "/v2/without-js/problem/{id}": {
    get: operations["getWithoutJsProblem"];
  };
  "/v2/without-js/sector/{id}": {
    get: operations["getWithoutJsSector"];
  };
  "/v2/comments": {
    post: operations["postComments"];
  };
  "/v2/media/svg": {
    post: operations["postMediaSvg"];
  };
  "/v2/problems/media": {
    post: operations["postProblemsMedia"];
  };
  "/v2/problems/svg": {
    post: operations["postProblemsSvg"];
  };
  "/v2/search": {
    post: operations["postSearch"];
  };
  "/v2/user/regions": {
    post: operations["postUserRegions"];
  };
  "/v2/media/info": {
    put: operations["putMediaInfo"];
  };
  "/v2/media/jpeg/rotate": {
    put: operations["putMediaJpegRotate"];
  };
};

export type definitions = {
  PermissionUser: {
    /** Format: int32 */
    userId?: number;
    name?: string;
    picture?: string;
    lastLogin?: string;
    adminRead?: boolean;
    adminWrite?: boolean;
    superadminRead?: boolean;
    superadminWrite?: boolean;
    readOnly?: boolean;
  };
  Activity: {
    activityIds?: number[];
    timeAgo?: string;
    /** Format: int32 */
    problemId?: number;
    problemLockedAdmin?: boolean;
    problemLockedSuperadmin?: boolean;
    problemName?: string;
    problemSubtype?: string;
    grade?: string;
    /** Format: int32 */
    problemRandomMediaId?: number;
    /** Format: int32 */
    problemRandomMediaCrc32?: number;
    media?: definitions["ActivityMedia"][];
    /** Format: int32 */
    stars?: number;
    repeat?: boolean;
    /** Format: int32 */
    id?: number;
    name?: string;
    picture?: string;
    description?: string;
    message?: string;
    users?: definitions["ActivityUser"][];
  };
  ActivityMedia: {
    /** Format: int32 */
    id?: number;
    /** Format: int32 */
    crc32?: number;
    embedUrl?: string;
    movie?: boolean;
  };
  ActivityUser: {
    /** Format: int32 */
    id?: number;
    name?: string;
    picture?: string;
  };
  Administrator: {
    /** Format: int32 */
    userId?: number;
    name?: string;
    picture?: string;
    lastLogin?: string;
  };
  Area: {
    redirectUrl?: string;
    /** Format: int32 */
    regionId?: number;
    canonical?: string;
    /** Format: int32 */
    id?: number;
    trash?: boolean;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    forDevelopers?: boolean;
    accessInfo?: string;
    accessClosed?: string;
    noDogsAllowed?: boolean;
    name?: string;
    comment?: string;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    /** Format: int32 */
    numSectors?: number;
    /** Format: int32 */
    numProblems?: number;
    sectors?: definitions["AreaSector"][];
    sectorOrder?: definitions["AreaSectorOrder"][];
    media?: definitions["Media"][];
    triviaMedia?: definitions["Media"][];
    newMedia?: definitions["NewMedia"][];
    /** Format: int64 */
    hits?: number;
    typeNumTicked?: definitions["TypeNumTicked"][];
  };
  AreaSector: {
    areaName?: string;
    /** Format: int32 */
    id?: number;
    /** Format: int32 */
    sorting?: number;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    name?: string;
    comment?: string;
    accessInfo?: string;
    accessClosed?: string;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    polygonCoords?: string;
    polyline?: string;
    /** Format: int32 */
    randomMediaId?: number;
    /** Format: int32 */
    randomMediaCrc32?: number;
    problems?: definitions["SectorProblem"][];
    typeNumTicked?: definitions["TypeNumTicked"][];
    /** Format: int32 */
    numProblems?: number;
  };
  AreaSectorOrder: {
    /** Format: int32 */
    id?: number;
    name?: string;
    /** Format: int32 */
    sorting?: number;
  };
  Media: {
    /** Format: int32 */
    id?: number;
    uploadedByMe?: boolean;
    /** Format: int32 */
    crc32?: number;
    /** Format: int32 */
    pitch?: number;
    trivia?: boolean;
    /** Format: int32 */
    width?: number;
    /** Format: int32 */
    height?: number;
    /** Format: int32 */
    idType?: number;
    t?: string;
    mediaSvgs?: definitions["MediaSvgElement"][];
    /** Format: int32 */
    svgProblemId?: number;
    svgs?: definitions["Svg"][];
    mediaMetadata?: definitions["MediaMetadata"];
    embedUrl?: string;
    inherited?: boolean;
    /** Format: int32 */
    enableMoveToIdSector?: number;
    /** Format: int32 */
    enableMoveToIdProblem?: number;
  };
  MediaMetadata: {
    dateCreated?: string;
    dateTaken?: string;
    capturer?: string;
    tagged?: string;
    description?: string;
    alt?: string;
  };
  MediaSvgElement: {
    /** @enum {string} */
    t?: "PATH" | "RAPPEL_BOLTED" | "RAPPEL_NOT_BOLTED";
    /** Format: int32 */
    id?: number;
    path?: string;
    /** Format: int32 */
    rappelX?: number;
    /** Format: int32 */
    rappelY?: number;
  };
  NewMedia: {
    name?: string;
    photographer?: string;
    inPhoto?: string;
    /** Format: int32 */
    pitch?: number;
    trivia?: boolean;
    description?: string;
    embedVideoUrl?: string;
    embedThumbnailUrl?: string;
    /** Format: int64 */
    embedMilliseconds?: number;
  };
  SectorProblem: {
    /** Format: int32 */
    id?: number;
    broken?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    /** Format: int32 */
    nr?: number;
    name?: string;
    rock?: string;
    comment?: string;
    /** Format: int32 */
    gradeNumber?: number;
    grade?: string;
    fa?: string;
    /** Format: int32 */
    numPitches?: number;
    hasImages?: boolean;
    hasMovies?: boolean;
    hasTopo?: boolean;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    /** Format: int32 */
    numTicks?: number;
    /** Format: double */
    stars?: number;
    ticked?: boolean;
    todo?: boolean;
    t?: definitions["Type"];
    danger?: boolean;
  };
  Svg: {
    delete?: boolean;
    /** Format: int32 */
    id?: number;
    /** Format: int32 */
    problemId?: number;
    problemName?: string;
    problemGrade?: string;
    /** Format: int32 */
    problemGradeGroup?: number;
    problemSubtype?: string;
    /** Format: int32 */
    nr?: number;
    path?: string;
    hasAnchor?: boolean;
    texts?: string;
    anchors?: string;
    primary?: boolean;
    ticked?: boolean;
    todo?: boolean;
    dangerous?: boolean;
  };
  Type: {
    /** Format: int32 */
    id?: number;
    type?: string;
    subType?: string;
  };
  TypeNumTicked: {
    type?: string;
    /** Format: int32 */
    num?: number;
    /** Format: int32 */
    ticked?: number;
  };
  Grade: {
    /** Format: int32 */
    id?: number;
    grade?: string;
  };
  LatLng: {
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
  };
  Meta: {
    title?: string;
    grades?: definitions["Grade"][];
    /** Format: int32 */
    defaultZoom?: number;
    defaultCenter?: definitions["LatLng"];
    url?: string;
    types?: definitions["Type"][];
    sites?: definitions["Site"][];
    bouldering?: boolean;
    authenticated?: boolean;
    admin?: boolean;
    superAdmin?: boolean;
    climbing?: boolean;
    ice?: boolean;
  };
  Site: {
    group?: string;
    name?: string;
    url?: string;
    polygonCoords?: string;
    active?: boolean;
  };
  Webcam: {
    id?: string;
    lastUpdated?: string;
    name?: string;
    urlStillImage?: string;
    urlYr?: string;
    urlOther?: string;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
  };
  Dangerous: {
    /** Format: int32 */
    id?: number;
    url?: string;
    name?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    sectors?: definitions["DangerousSector"][];
  };
  DangerousProblem: {
    /** Format: int32 */
    id?: number;
    url?: string;
    broken?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    /** Format: int32 */
    nr?: number;
    name?: string;
    grade?: string;
    postBy?: string;
    postWhen?: string;
    postTxt?: string;
  };
  DangerousSector: {
    /** Format: int32 */
    id?: number;
    url?: string;
    name?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    problems?: definitions["DangerousProblem"][];
  };
  Frontpage: {
    /** Format: int32 */
    numProblems?: number;
    /** Format: int32 */
    numProblemsWithCoordinates?: number;
    /** Format: int32 */
    numProblemsWithTopo?: number;
    /** Format: int32 */
    numTicks?: number;
    /** Format: int32 */
    numImages?: number;
    /** Format: int32 */
    numMovies?: number;
    randomMedia?: definitions["FrontpageRandomMedia"];
  };
  FrontpageRandomMedia: {
    /** Format: int32 */
    idMedia?: number;
    /** Format: int32 */
    crc32?: number;
    /** Format: int32 */
    width?: number;
    /** Format: int32 */
    height?: number;
    /** Format: int32 */
    idArea?: number;
    area?: string;
    /** Format: int32 */
    idSector?: number;
    sector?: string;
    /** Format: int32 */
    idProblem?: number;
    problem?: string;
    grade?: string;
    photographer?: definitions["User"];
    tagged?: definitions["User"][];
  };
  User: {
    /** Format: int32 */
    id?: number;
    name?: string;
  };
  GradeDistribution: {
    grade?: string;
    /** Format: int32 */
    num?: number;
    /** Format: int32 */
    prim?: number;
    /** Format: int32 */
    sec?: number;
    rows?: definitions["GradeDistributionRow"][];
  };
  GradeDistributionRow: {
    name?: string;
    /** Format: int32 */
    numBoulder?: number;
    /** Format: int32 */
    numSport?: number;
    /** Format: int32 */
    numTrad?: number;
    /** Format: int32 */
    numMixed?: number;
    /** Format: int32 */
    numTopRope?: number;
    /** Format: int32 */
    numAid?: number;
    /** Format: int32 */
    numAidTrad?: number;
    /** Format: int32 */
    numIce?: number;
  };
  FaAid: {
    /** Format: int32 */
    problemId?: number;
    date?: string;
    dateHr?: string;
    description?: string;
    users?: definitions["FaUser"][];
  };
  FaUser: {
    /** Format: int32 */
    id?: number;
    name?: string;
    picture?: string;
  };
  Problem: {
    redirectUrl?: string;
    /** Format: int32 */
    areaId?: number;
    areaLockedAdmin?: boolean;
    areaLockedSuperadmin?: boolean;
    areaName?: string;
    areaAccessInfo?: string;
    areaAccessClosed?: string;
    areaNoDogsAllowed?: boolean;
    /** Format: int32 */
    sectorId?: number;
    sectorLockedAdmin?: boolean;
    sectorLockedSuperadmin?: boolean;
    sectorName?: string;
    sectorAccessInfo?: string;
    sectorAccessClosed?: string;
    /** Format: double */
    sectorLat?: number;
    /** Format: double */
    sectorLng?: number;
    sectorPolygonCoords?: string;
    sectorPolyline?: string;
    /** Format: int32 */
    sectorIdProblemPrev?: number;
    /** Format: int32 */
    sectorIdProblemNext?: number;
    canonical?: string;
    /** Format: int32 */
    id?: number;
    broken?: string;
    trash?: boolean;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    /** Format: int32 */
    nr?: number;
    name?: string;
    rock?: string;
    comment?: string;
    grade?: string;
    originalGrade?: string;
    faDate?: string;
    faDateHr?: string;
    fa?: definitions["FaUser"][];
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    media?: definitions["Media"][];
    /** Format: int32 */
    numTicks?: number;
    /** Format: double */
    stars?: number;
    ticked?: boolean;
    ticks?: definitions["ProblemTick"][];
    todos?: definitions["ProblemTodo"][];
    comments?: definitions["ProblemComment"][];
    newMedia?: definitions["NewMedia"][];
    t?: definitions["Type"];
    sections?: definitions["ProblemSection"][];
    todo?: boolean;
    /** Format: int64 */
    hits?: number;
    faAid?: definitions["FaAid"];
    trivia?: string;
    triviaMedia?: definitions["Media"][];
    startingAltitude?: string;
    aspect?: string;
    routeLength?: string;
    descent?: string;
  };
  ProblemComment: {
    /** Format: int32 */
    id?: number;
    date?: string;
    /** Format: int32 */
    idUser?: number;
    picture?: string;
    name?: string;
    message?: string;
    danger?: boolean;
    resolved?: boolean;
    media?: definitions["Media"][];
    editable?: boolean;
  };
  ProblemSection: {
    /** Format: int32 */
    id?: number;
    /** Format: int32 */
    nr?: number;
    description?: string;
    grade?: string;
    media?: definitions["Media"][];
  };
  ProblemTick: {
    repeats?: definitions["TickRepeat"][];
    /** Format: int32 */
    id?: number;
    /** Format: int32 */
    idUser?: number;
    picture?: string;
    date?: string;
    name?: string;
    suggestedGrade?: string;
    comment?: string;
    /** Format: double */
    stars?: number;
    writable?: boolean;
  };
  ProblemTodo: {
    /** Format: int32 */
    idUser?: number;
    picture?: string;
    name?: string;
  };
  TickRepeat: {
    /** Format: int32 */
    id?: number;
    /** Format: int32 */
    tickId?: number;
    comment?: string;
    date?: string;
  };
  ProblemArea: {
    /** Format: int32 */
    id?: number;
    url?: string;
    name?: string;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    sectors?: definitions["ProblemAreaSector"][];
  };
  ProblemAreaProblem: {
    /** Format: int32 */
    id?: number;
    url?: string;
    broken?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    /** Format: int32 */
    nr?: number;
    name?: string;
    description?: string;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    grade?: string;
    fa?: string;
    /** Format: int32 */
    numTicks?: number;
    /** Format: double */
    stars?: number;
    ticked?: boolean;
    t?: definitions["Type"];
    /** Format: int32 */
    numPitches?: number;
  };
  ProblemAreaSector: {
    /** Format: int32 */
    id?: number;
    url?: string;
    name?: string;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    polygonCoords?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    problems?: definitions["ProblemAreaProblem"][];
  };
  Profile: {
    /** Format: int32 */
    id?: number;
    picture?: string;
    firstname?: string;
    lastname?: string;
    userRegions?: definitions["UserRegion"][];
  };
  UserRegion: {
    /** Format: int32 */
    id?: number;
    name?: string;
    role?: string;
    enabled?: boolean;
    readOnly?: boolean;
  };
  ProfileMedia: {
    /** Format: int32 */
    id?: number;
    uploadedByMe?: boolean;
    /** Format: int32 */
    crc32?: number;
    /** Format: int32 */
    pitch?: number;
    trivia?: boolean;
    /** Format: int32 */
    width?: number;
    /** Format: int32 */
    height?: number;
    /** Format: int32 */
    idType?: number;
    t?: string;
    mediaSvgs?: definitions["MediaSvgElement"][];
    /** Format: int32 */
    svgProblemId?: number;
    svgs?: definitions["Svg"][];
    mediaMetadata?: definitions["MediaMetadata"];
    embedUrl?: string;
    inherited?: boolean;
    /** Format: int32 */
    enableMoveToIdSector?: number;
    /** Format: int32 */
    enableMoveToIdProblem?: number;
  };
  ProfileStatistics: {
    /** Format: int32 */
    numImagesCreated?: number;
    /** Format: int32 */
    numVideosCreated?: number;
    /** Format: int32 */
    numImageTags?: number;
    /** Format: int32 */
    numVideoTags?: number;
    ticks?: definitions["ProfileStatisticsTick"][];
  };
  ProfileStatisticsTick: {
    areaName?: string;
    areaLockedAdmin?: boolean;
    areaLockedSuperadmin?: boolean;
    sectorName?: string;
    sectorLockedAdmin?: boolean;
    sectorLockedSuperadmin?: boolean;
    /** Format: int32 */
    num?: number;
    /** Format: int32 */
    id?: number;
    /** Format: int32 */
    idTickRepeat?: number;
    subType?: string;
    /** Format: int32 */
    numPitches?: number;
    /** Format: int32 */
    idProblem?: number;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    name?: string;
    comment?: string;
    date?: string;
    dateHr?: string;
    /** Format: double */
    stars?: number;
    fa?: boolean;
    grade?: string;
    /** Format: int32 */
    gradeNumber?: number;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
  };
  ProfileTodo: {
    areas?: definitions["ProfileTodoArea"][];
  };
  ProfileTodoArea: {
    /** Format: int32 */
    id?: number;
    url?: string;
    name?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    sectors?: definitions["ProfileTodoSector"][];
  };
  ProfileTodoPartner: {
    /** Format: int32 */
    id?: number;
    name?: string;
  };
  ProfileTodoProblem: {
    /** Format: int32 */
    todoId?: number;
    /** Format: int32 */
    id?: number;
    url?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    /** Format: int32 */
    nr?: number;
    name?: string;
    grade?: string;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    partners?: definitions["ProfileTodoPartner"][];
  };
  ProfileTodoSector: {
    /** Format: int32 */
    id?: number;
    url?: string;
    name?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    problems?: definitions["ProfileTodoProblem"][];
  };
  Sector: {
    redirectUrl?: string;
    orderByGrade?: boolean;
    /** Format: int32 */
    areaId?: number;
    areaLockedAdmin?: boolean;
    areaLockedSuperadmin?: boolean;
    areaAccessInfo?: string;
    areaAccessClosed?: string;
    areaNoDogsAllowed?: boolean;
    areaName?: string;
    canonical?: string;
    /** Format: int32 */
    id?: number;
    trash?: boolean;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    name?: string;
    comment?: string;
    accessInfo?: string;
    accessClosed?: string;
    /** Format: double */
    lat?: number;
    /** Format: double */
    lng?: number;
    polygonCoords?: string;
    polyline?: string;
    media?: definitions["Media"][];
    triviaMedia?: definitions["Media"][];
    sectors?: definitions["SectorJump"][];
    problems?: definitions["SectorProblem"][];
    problemOrder?: definitions["SectorProblemOrder"][];
    newMedia?: definitions["NewMedia"][];
    /** Format: int64 */
    hits?: number;
    siblings?: definitions["SectorJump"][];
  };
  SectorJump: {
    /** Format: int32 */
    id?: number;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    name?: string;
  };
  SectorProblemOrder: {
    /** Format: int32 */
    id?: number;
    name?: string;
    /** Format: int32 */
    nr?: number;
  };
  PublicAscent: {
    areaName?: string;
    areaLockedAdmin?: boolean;
    areaLockedSuperadmin?: boolean;
    sectorName?: string;
    sectorLockedAdmin?: boolean;
    sectorLockedSuperadmin?: boolean;
    /** Format: int32 */
    problemId?: number;
    problemGrade?: string;
    problemName?: string;
    problemLockedAdmin?: boolean;
    problemLockedSuperadmin?: boolean;
    date?: string;
    name?: string;
  };
  Ticks: {
    ticks?: definitions["PublicAscent"][];
    /** Format: int32 */
    currPage?: number;
    /** Format: int32 */
    numPages?: number;
  };
  Todo: {
    sectors?: definitions["TodoSector"][];
  };
  TodoPartner: {
    /** Format: int32 */
    id?: number;
    name?: string;
  };
  TodoProblem: {
    /** Format: int32 */
    id?: number;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    /** Format: int32 */
    nr?: number;
    name?: string;
    grade?: string;
    partners?: definitions["TodoPartner"][];
  };
  TodoSector: {
    /** Format: int32 */
    id?: number;
    name?: string;
    lockedAdmin?: boolean;
    lockedSuperadmin?: boolean;
    problems?: definitions["TodoProblem"][];
  };
  Top: {
    /** Format: int32 */
    rank?: number;
    /** Format: int32 */
    userId?: number;
    name?: string;
    picture?: string;
    /** Format: double */
    percentage?: number;
  };
  Trash: {
    /** Format: int32 */
    idArea?: number;
    /** Format: int32 */
    idSector?: number;
    /** Format: int32 */
    idProblem?: number;
    /** Format: int32 */
    idMedia?: number;
    name?: string;
    when?: string;
    by?: string;
  };
  UserSearch: {
    /** Format: int32 */
    id?: number;
    name?: string;
  };
  Redirect: {
    /** Format: int32 */
    idArea?: number;
    /** Format: int32 */
    idSector?: number;
    redirectUrl?: string;
    destination?: string;
  };
  BodyPart: {
    contentDisposition?: definitions["ContentDisposition"];
    entity?: { [key: string]: unknown };
    headers?: { [key: string]: string[] };
    mediaType?: definitions["MediaType"];
    messageBodyWorkers?: definitions["MessageBodyWorkers"];
    parent?: definitions["MultiPart"];
    providers?: definitions["Providers"];
    parameterizedHeaders?: {
      [key: string]: definitions["ParameterizedHeader"][];
    };
  };
  ContentDisposition: {
    type?: string;
    parameters?: { [key: string]: string };
    fileName?: string;
    /** Format: date-time */
    creationDate?: string;
    /** Format: date-time */
    modificationDate?: string;
    /** Format: date-time */
    readDate?: string;
    /** Format: int64 */
    size?: number;
  };
  FormDataBodyPart: {
    contentDisposition?: definitions["ContentDisposition"];
    entity?: { [key: string]: unknown };
    headers?: { [key: string]: string[] };
    mediaType?: definitions["MediaType"];
    messageBodyWorkers?: definitions["MessageBodyWorkers"];
    parent?: definitions["MultiPart"];
    providers?: definitions["Providers"];
    name?: string;
    value?: string;
    formDataContentDisposition?: definitions["FormDataContentDisposition"];
    simple?: boolean;
    parameterizedHeaders?: {
      [key: string]: definitions["ParameterizedHeader"][];
    };
  };
  FormDataContentDisposition: {
    type?: string;
    parameters?: { [key: string]: string };
    fileName?: string;
    /** Format: date-time */
    creationDate?: string;
    /** Format: date-time */
    modificationDate?: string;
    /** Format: date-time */
    readDate?: string;
    /** Format: int64 */
    size?: number;
    name?: string;
  };
  FormDataMultiPart: {
    contentDisposition?: definitions["ContentDisposition"];
    entity?: { [key: string]: unknown };
    headers?: { [key: string]: string[] };
    mediaType?: definitions["MediaType"];
    messageBodyWorkers?: definitions["MessageBodyWorkers"];
    parent?: definitions["MultiPart"];
    providers?: definitions["Providers"];
    bodyParts?: definitions["BodyPart"][];
    fields?: { [key: string]: definitions["FormDataBodyPart"][] };
    parameterizedHeaders?: {
      [key: string]: definitions["ParameterizedHeader"][];
    };
  };
  MediaType: {
    type?: string;
    subtype?: string;
    parameters?: { [key: string]: string };
    wildcardType?: boolean;
    wildcardSubtype?: boolean;
  };
  MessageBodyWorkers: { [key: string]: unknown };
  MultiPart: {
    contentDisposition?: definitions["ContentDisposition"];
    entity?: { [key: string]: unknown };
    headers?: { [key: string]: string[] };
    mediaType?: definitions["MediaType"];
    messageBodyWorkers?: definitions["MessageBodyWorkers"];
    parent?: definitions["MultiPart"];
    providers?: definitions["Providers"];
    bodyParts?: definitions["BodyPart"][];
    parameterizedHeaders?: {
      [key: string]: definitions["ParameterizedHeader"][];
    };
  };
  ParameterizedHeader: {
    value?: string;
    parameters?: { [key: string]: string };
  };
  Providers: { [key: string]: unknown };
  Search: {
    title?: string;
    description?: string;
    url?: string;
    externalurl?: string;
    mediaurl?: string;
    /** Format: int32 */
    mediaid?: number;
    /** Format: int32 */
    crc32?: number;
    lockedadmin?: boolean;
    lockedsuperadmin?: boolean;
  };
  SearchRequest: {
    value?: string;
  };
  Tick: {
    delete?: boolean;
    /** Format: int32 */
    id?: number;
    /** Format: int32 */
    idProblem?: number;
    comment?: string;
    date?: string;
    /** Format: double */
    stars?: number;
    grade?: string;
    repeats?: definitions["TickRepeat"][];
  };
  MediaInfo: {
    /** Format: int32 */
    mediaId?: number;
    description?: string;
    /** Format: int32 */
    pitch?: number;
    trivia?: boolean;
  };
};

export type operations = {
  getPermissions: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["PermissionUser"][];
      };
    };
  };
  postPermissions: {
    parameters: {
      body: {
        body?: definitions["PermissionUser"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  getMedia: {
    parameters: {
      query: {
        /** Media id */
        idMedia: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Media"];
      };
    };
  };
  putMedia: {
    parameters: {
      query: {
        /** Move right */
        id: number;
        /** Move left */
        left: boolean;
        /** To sector id (will move media to sector if toSectorId>0 and toProblemId=0) */
        toIdSector: number;
        /** To problem id (will move media to problem if toProblemId>0 and toSectorId=0) */
        toIdProblem: number;
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  deleteMedia: {
    parameters: {
      query: {
        /** Media id */
        id: number;
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  getActivity: {
    parameters: {
      query: {
        /** Area id (can be 0 if idSector>0) */
        idArea: number;
        /** Sector id (can be 0 if idArea>0) */
        idSector: number;
        /** Filter on lower grade */
        lowerGrade?: number;
        /** Include first ascents */
        fa?: boolean;
        /** Include comments */
        comments?: boolean;
        /** Include ticks (public ascents) */
        ticks?: boolean;
        /** Include new media */
        media?: boolean;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Activity"][];
      };
    };
  };
  getAdministrators: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Administrator"][];
      };
    };
  };
  getAreas: {
    parameters: {
      query: {
        /** Area id */
        id?: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Area"][];
      };
    };
  };
  postAreas: {
    parameters: {
      body: {
        body?: definitions["FormDataMultiPart"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Redirect"];
      };
    };
  };
  getAreasPdf: {
    parameters: {
      query: {
        /** Access token */
        accessToken?: string;
        /** Area id */
        id: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string[];
      };
    };
  };
  getImages: {
    parameters: {
      query: {
        /** Media id */
        id: number;
        /** Checksum - not used in ws, but necessary to include on client when an image is changed (e.g. rotated) to avoid cached version */
        crc32?: number;
        /** Image size - E.g. minDimention=100 can return an image with the size 100x133px */
        minDimention?: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string[];
      };
    };
  };
  getMeta: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Meta"];
      };
    };
  };
  getCameras: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Webcam"][];
      };
    };
  };
  getDangerous: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Dangerous"][];
      };
    };
  };
  getFrontpage: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Frontpage"];
      };
    };
  };
  getGradeDistribution: {
    parameters: {
      query: {
        /** Area id (can be 0 if idSector>0) */
        idArea: number;
        /** Sector id (can be 0 if idArea>0) */
        idSector: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["GradeDistribution"][];
      };
    };
  };
  getGraph: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["GradeDistribution"][];
      };
    };
  };
  getProblem: {
    parameters: {
      query: {
        /** Problem id */
        id: number;
        /** Include hidden media (example: if a sector has multiple topo-images, the topo-images without this route will be hidden) */
        showHiddenMedia?: boolean;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Problem"];
      };
    };
  };
  getProblemPdf: {
    parameters: {
      query: {
        /** Access token */
        accessToken?: string;
        /** Problem id */
        id: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string[];
      };
    };
  };
  getProblems: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["ProblemArea"][];
      };
    };
  };
  postProblems: {
    parameters: {
      body: {
        body?: definitions["FormDataMultiPart"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Redirect"];
      };
    };
  };
  getProblemsXlsx: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string[];
      };
    };
  };
  getProfile: {
    parameters: {
      query: {
        /** User id (will return logged in user without this attribute) */
        id: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Profile"];
      };
    };
  };
  getProfilemedia: {
    parameters: {
      query: {
        /** User id */
        id: number;
        /** FALSE = tagged media, TRUE = captured media */
        captured?: boolean;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["ProfileMedia"][];
      };
    };
  };
  getProfileStatistics: {
    parameters: {
      query: {
        /** User id */
        id: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["ProfileStatistics"];
      };
    };
  };
  getProfileTodo: {
    parameters: {
      query: {
        /** User id */
        id: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["ProfileTodo"];
      };
    };
  };
  getRobotsTxt: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        schema: string;
      };
    };
  };
  getSectors: {
    parameters: {
      query: {
        /** Sector id */
        id: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Sector"];
      };
    };
  };
  postSectors: {
    parameters: {
      body: {
        body?: definitions["FormDataMultiPart"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Redirect"];
      };
    };
  };
  getSectorsPdf: {
    parameters: {
      query: {
        /** Access token */
        accessToken?: string;
        /** Sector id */
        id: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string[];
      };
    };
  };
  getSitemapTxt: {
    parameters: {
      query: {
        base?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string;
      };
    };
  };
  getTicks: {
    parameters: {
      query: {
        /** Page (ticks ordered descending, 0 returns fist page) */
        page?: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Ticks"];
      };
    };
  };
  postTicks: {
    parameters: {
      body: {
        body?: definitions["Tick"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  getTodo: {
    parameters: {
      query: {
        /** Area id (can be 0 if idSector>0) */
        idArea: number;
        /** Sector id (can be 0 if idArea>0) */
        idSector: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Todo"];
      };
    };
  };
  postTodo: {
    parameters: {
      query: {
        /** Problem id */
        idProblem: number;
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  getTop: {
    parameters: {
      query: {
        /** Area id (can be 0 if idSector>0) */
        idArea: number;
        /** Sector id (can be 0 if idArea>0) */
        idSector: number;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Top"][];
      };
    };
  };
  getTrash: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Trash"][];
      };
    };
  };
  putTrash: {
    parameters: {
      query: {
        /** Area id */
        idArea: number;
        /** Sector id */
        idSector: number;
        /** Problem id */
        idProblem: number;
        /** Media id */
        idMedia: number;
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  getUsersSearch: {
    parameters: {
      query: {
        /** Search keyword */
        value: string;
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["UserSearch"][];
      };
    };
  };
  getUsersTicks: {
    parameters: {
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string[];
      };
    };
  };
  getWithoutJs: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        schema: string;
      };
    };
  };
  getWithoutJsArea: {
    parameters: {
      path: {
        /** Area id */
        id: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string;
      };
    };
  };
  getWithoutJsProblem: {
    parameters: {
      path: {
        /** Problem id */
        id: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string;
      };
    };
  };
  getWithoutJsSector: {
    parameters: {
      path: {
        /** Sector id */
        id: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: string;
      };
    };
  };
  postComments: {
    parameters: {
      body: {
        body?: definitions["FormDataMultiPart"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  postMediaSvg: {
    parameters: {
      body: {
        body?: definitions["Media"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  postProblemsMedia: {
    parameters: {
      query: {
        /** Problem id */
        problemId: number;
      };
      body: {
        body?: definitions["FormDataMultiPart"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Problem"];
      };
    };
  };
  postProblemsSvg: {
    parameters: {
      query: {
        /** Problem id */
        problemId: number;
        /** Media id */
        mediaId: number;
      };
      body: {
        body?: definitions["Svg"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  postSearch: {
    parameters: {
      body: {
        body?: definitions["SearchRequest"];
      };
      header: {
        /** Authorization token */
        Authorization?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        schema: definitions["Search"][];
      };
    };
  };
  postUserRegions: {
    parameters: {
      query: {
        /** Region id */
        regionId: number;
        /** Delete (TRUE=hide, FALSE=show) */
        delete: boolean;
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  putMediaInfo: {
    parameters: {
      body: {
        body?: definitions["MediaInfo"];
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
  putMediaJpegRotate: {
    parameters: {
      query: {
        /** Media id */
        idMedia: number;
        /** Degrees (90/180/270) */
        degrees: number;
      };
      header: {
        /** Authorization token */
        Authorization: string;
      };
    };
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
};

export type external = {};
